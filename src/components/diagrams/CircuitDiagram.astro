---
// Layout calculations
const canvas = { width: 800, height: 600 };

// Applications box
const apps = {
  x: 50,
  y: 300,
  width: 100,
  height: 40,
  get centerY() {
    return this.y + this.height / 2;
  },
};

// Gateway box
const gateway = {
  x: 300,
  width: 200,
  height: 100,
  get y() {
    return apps.centerY - this.height / 2;
  },
  get centerY() {
    return apps.centerY;
  },
};

// Provider boxes - centered against LLM Gateway
const providers = {
  x: 600,
  width: 140,
  height: 80,
  gap: 20,
  count: 4,
  get totalHeight() {
    return this.count * this.height + (this.count - 1) * this.gap;
  },
  get startY() {
    return gateway.y + (gateway.height - this.totalHeight) / 2;
  },
  positions: [],
};

// Calculate provider positions
for (let i = 0; i < providers.count; i++) {
  providers.positions.push({
    y: providers.startY + i * (providers.height + providers.gap),
    get centerY() {
      return this.y + providers.height / 2;
    },
  });
}

// Path coordinates with multiple mid-points
const paths = {
  appToGateway: {
    start: { x: apps.x + apps.width, y: apps.centerY },
    end: { x: gateway.x, y: gateway.centerY },
  },
  gatewayToProviders: providers.positions.map((pos, i) => {
    // Spread start points evenly across gateway height
    const startY =
      gateway.y + (gateway.height / (providers.count + 1)) * (i + 1);
    const K = Math.abs((pos.centerY - startY) / 2);
    return {
      start: { x: gateway.x + gateway.width, y: startY },
      mid1: { x: providers.x - K, y: startY },
      mid2: { x: providers.x - K, y: pos.centerY },
      end: { x: providers.x, y: pos.centerY },
    };
  }),
};
---

<div
  class="circuit-diagram"
  style="max-width: 800px; margin: 3rem auto; padding: 2rem;"
>
  <svg
    viewBox={`0 0 ${canvas.width} ${canvas.height}`}
    xmlns="http://www.w3.org/2000/svg"
    style="width: 100%; height: auto;"
  >
    {/* Define gradients */}
    <defs>
      <pattern
        id="circuitGrid"
        x="0"
        y="0"
        width="20"
        height="20"
        patternUnits="userSpaceOnUse"
      >
        <path
          d="M 20 0 L 0 0 0 20"
          fill="none"
          stroke="rgba(0,0,0,0.05)"
          stroke-width="0.5"></path>
      </pattern>
    </defs>

    <rect width="100%" height="100%" fill="url(#circuitGrid)"></rect>

    {/* Circuit paths with proper animations */}
    {/* Your AI Applications to Gateway */}
    <path
      d={`M ${paths.appToGateway.start.x} ${paths.appToGateway.start.y} L ${paths.appToGateway.end.x} ${paths.appToGateway.end.y}`}
      stroke="#fbe332"
      stroke-width="4"
      fill="none"
      stroke-linecap="round"
      opacity="0.8"
    >
      <animate
        attributeName="stroke-dasharray"
        values="0,200;100,100;200,0;0,200"
        dur="3s"
        repeatCount="indefinite"></animate>
    </path>

    {/* Gateway to Providers */}
    {
      paths.gatewayToProviders.map((path, i) => (
        <path
          d={`M ${path.start.x} ${path.start.y} L ${path.mid1.x} ${path.mid1.y} L ${path.mid2.x} ${path.mid2.y} L ${path.end.x} ${path.end.y}`}
          stroke="#fbe332"
          stroke-width="3"
          fill="none"
          stroke-linecap="round"
          opacity="0.8"
        >
          <animate
            attributeName="stroke-dasharray"
            values="0,300;150,150;300,0;0,300"
            dur="4s"
            begin={`${i * 0.5}s`}
            repeatCount="indefinite"
          />
        </path>
      ))
    }

    {/* Your AI Applications Input */}
    <rect
      x={apps.x}
      y={apps.y}
      width={apps.width}
      height={apps.height}
      rx="8"
      fill="#2563eb"
      stroke="#1d4ed8"
      stroke-width="2"></rect>
    <text
      x={apps.x + apps.width / 2}
      y={apps.y + 15}
      text-anchor="middle"
      fill="white"
      font-size="11"
      font-weight="500"
    >
      Your AI
    </text>
    <text
      x={apps.x + apps.width / 2}
      y={apps.y + 30}
      text-anchor="middle"
      fill="white"
      font-size="11"
      font-weight="500"
    >
      Applications
    </text>

    {/* LLM Gateway (Center) */}
    <rect
      x={gateway.x}
      y={gateway.y}
      width={gateway.width}
      height={gateway.height}
      rx="12"
      fill="#1f2937"
      stroke="#10b981"
      stroke-width="2"></rect>
    <text
      x={gateway.x + gateway.width / 2}
      y={gateway.y + 35}
      text-anchor="middle"
      fill="#10b981"
      font-size="20">üåê</text
    >
    <text
      x={gateway.x + gateway.width / 2}
      y={gateway.y + 60}
      text-anchor="middle"
      fill="#10b981"
      font-size="16"
      font-weight="600"
    >
      LLM Gateway
    </text>
    <text
      x={gateway.x + gateway.width / 2}
      y={gateway.y + 80}
      text-anchor="middle"
      fill="#6b7280"
      font-size="12"
    >
      Intelligent Routing
    </text>

    {
      /* Provider Boxes (Right column - evenly spaced using calculated positions) */
    }
    {
      [
        { name: "OpenAI", emoji: "ü§ñ", fill: "#00a67e", stroke: "#008f6b" },
        { name: "Anthropic", emoji: "üß†", fill: "#ff6b35", stroke: "#e55a2b" },
        { name: "DeepSeek", emoji: "üíª", fill: "#8b5cf6", stroke: "#7c3aed" },
        { name: "Llama", emoji: "ü¶ô", fill: "#f59e0b", stroke: "#d97706" },
      ].map((provider, i) => (
        <g key={provider.name}>
          <rect
            x={providers.x}
            y={providers.positions[i].y}
            width={providers.width}
            height={providers.height}
            rx="12"
            fill={provider.fill}
            stroke={provider.stroke}
            stroke-width="3"
          />
          <text
            x={providers.x + providers.width / 2}
            y={providers.positions[i].y + 30}
            text-anchor="middle"
            font-size="20"
          >
            {provider.emoji}
          </text>
          <text
            x={providers.x + providers.width / 2}
            y={providers.positions[i].y + 55}
            text-anchor="middle"
            font-size="14"
            font-weight="600"
            fill="white"
          >
            {provider.name}
          </text>
        </g>
      ))
    }

    {/* Connection nodes - using calculated positions */}
    <circle
      cx={paths.appToGateway.end.x}
      cy={paths.appToGateway.end.y}
      r="3"
      fill="#10b981"
      opacity="0.8"></circle>

    {/* Gateway start points */}
    {
      paths.gatewayToProviders.map((path) => (
        <circle
          cx={path.start.x}
          cy={path.start.y}
          r="3"
          fill="#10b981"
          opacity="0.8"
        />
      ))
    }

    {/* Mid-point connection nodes */}
    {
      paths.gatewayToProviders.map((path) => (
        <g>
          <circle
            cx={path.mid1.x}
            cy={path.mid1.y}
            r="2"
            fill="#6b7280"
            opacity="0.6"
          />
          <circle
            cx={path.mid2.x}
            cy={path.mid2.y}
            r="2"
            fill="#6b7280"
            opacity="0.6"
          />
          <circle
            cx={path.end.x}
            cy={path.end.y}
            r="2"
            fill="#6b7280"
            opacity="0.6"
          />
        </g>
      ))
    }
  </svg>
</div>
