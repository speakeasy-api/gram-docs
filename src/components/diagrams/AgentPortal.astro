---
// Layout calculations for the Slack demo
const canvas = { width: 500, height: 380 };

// Slack demo container - properly positioned within viewbox
const slackDemo = {
  x: 25,
  y: 20,
  width: 450,
  height: 340,
  cornerRadius: 12
};

// Message positioning
const messages = {
  headerHeight: 40,
  messageHeight: 60,
  spacing: 10,
  userMessage: {
    y: slackDemo.y + 40 + 10,
    height: 50
  },
  botMessage: {
    y: slackDemo.y + 40 + 70,
    height: 220
  }
};

// Bar chart data for deal distribution
const dealData = [
  { label: "$100K+", value: 8, percentage: 35, color: "#dc2626" },
  { label: "$50-100K", value: 12, percentage: 45, color: "#ea580c" },
  { label: "$25-50K", value: 15, percentage: 60, color: "#059669" },
  { label: "< $25K", value: 12, percentage: 40, color: "#2563eb" }
];

// Chart dimensions
const chart = {
  x: slackDemo.x + 20,
  y: messages.botMessage.y + 100,
  width: slackDemo.width - 40,
  height: 100,
  barWidth: 80,
  maxHeight: 70
};
---

<div
  class="agent-portal-demo"
  style="
    display: flex;
    justify-content: center;
    margin: 2rem auto 0;
    max-width: 600px;
    background: #f8f9fa;
    border: 1px solid #e1e8ed;
    border-radius: 0.75rem;
    overflow: hidden;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    padding: 1rem;
  "
>
  <svg
    viewBox={`0 0 ${canvas.width} ${canvas.height}`}
    xmlns="http://www.w3.org/2000/svg"
    style="width: 100%; height: auto;"
  >
    {/* Slack demo inner container */}
    <rect
      x={slackDemo.x}
      y={slackDemo.y}
      width={slackDemo.width}
      height={slackDemo.height}
      rx={slackDemo.cornerRadius}
      fill="white"
      stroke="#e1e8ed"
      stroke-width="1"
    />

    {/* Slack header */}
    <rect
      x={slackDemo.x}
      y={slackDemo.y}
      width={slackDemo.width}
      height={40}
      rx={slackDemo.cornerRadius}
      fill="#4a154b"
    />
    <rect
      x={slackDemo.x}
      y={slackDemo.y + 40 - slackDemo.cornerRadius}
      width={slackDemo.width}
      height={slackDemo.cornerRadius}
      fill="#4a154b"
    />

    <text
      x={slackDemo.x + 15}
      y={slackDemo.y + 27}
      font-size="14"
      font-weight="600"
      fill="#e1e8ed"
    >
      # sales-reports
    </text>

    {/* User message */}
    <rect
      x={slackDemo.x + 10}
      y={messages.userMessage.y}
      width={slackDemo.width - 20}
      height={messages.userMessage.height}
      fill="white"
      stroke="#e1e8ed"
      stroke-width="1"
    />

    <text
      x={slackDemo.x + 20}
      y={messages.userMessage.y + 18}
      font-size="12"
      font-weight="600"
      fill="#1d1c1d"
    >
      Sarah Chen
    </text>
    <text
      x={slackDemo.x + 350}
      y={messages.userMessage.y + 18}
      font-size="10"
      fill="#616061"
    >
      2:14 PM
    </text>
    <text
      x={slackDemo.x + 20}
      y={messages.userMessage.y + 35}
      font-size="12"
      fill="#1d1c1d"
    >
      Show me a breakdown of our Q4 pipeline by deal size
    </text>

    {/* Bot message container */}
    <rect
      x={slackDemo.x + 10}
      y={messages.botMessage.y}
      width={slackDemo.width - 20}
      height={messages.botMessage.height}
      fill="#f8f9fa"
      stroke="#e1e8ed"
      stroke-width="1"
    />

    <text
      x={slackDemo.x + 20}
      y={messages.botMessage.y + 18}
      font-size="12"
      font-weight="600"
      fill="#1264a3"
    >
      Gram
    </text>
    <text
      x={slackDemo.x + 350}
      y={messages.botMessage.y + 18}
      font-size="10"
      fill="#616061"
    >
      2:14 PM
    </text>

    {/* Tool invocation with animation */}
    <rect
      x={slackDemo.x + 20}
      y={messages.botMessage.y + 25}
      width={slackDemo.width - 40}
      height={30}
      rx="6"
      fill="rgba(59, 130, 246, 0.1)"
      stroke="rgba(59, 130, 246, 0.2)"
      stroke-width="1"
      opacity="1"
    >
      <animate attributeName="opacity" values="1;1;1;1;1;1;1;1;1;1;0;0;0;0;0;0;0;0;0;0" dur="4s" repeatCount="indefinite"/>
    </rect>

    <text
      x={slackDemo.x + 30}
      y={messages.botMessage.y + 43}
      font-size="11"
      font-style="italic"
      fill="#1264a3"
      opacity="1"
    >
      ðŸ”„ Invoking listDeals tool...
      <animate attributeName="opacity" values="1;1;1;1;1;1;1;1;1;1;0;0;0;0;0;0;0;0;0;0" dur="4s" repeatCount="indefinite"/>
    </text>

    {/* Progress bar */}
    <rect
      x={slackDemo.x + 200}
      y={messages.botMessage.y + 38}
      width="120"
      height="4"
      rx="2"
      fill="rgba(59, 130, 246, 0.2)"
      opacity="1"
    >
      <animate attributeName="opacity" values="1;1;1;1;1;1;1;1;1;1;0;0;0;0;0;0;0;0;0;0" dur="4s" repeatCount="indefinite"/>
    </rect>
    <rect
      x={slackDemo.x + 200}
      y={messages.botMessage.y + 38}
      width="0"
      height="4"
      rx="2"
      fill="#3b82f6"
      opacity="1"
    >
      <animate attributeName="width" values="0;12;24;36;48;60;72;84;96;120;120;120;120;120;120;120;120;120;120;120" dur="4s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="1;1;1;1;1;1;1;1;1;1;0;0;0;0;0;0;0;0;0;0" dur="4s" repeatCount="indefinite"/>
    </rect>

    {/* Results text */}
    <text
      x={slackDemo.x + 20}
      y={messages.botMessage.y + 45}
      font-size="12"
      font-weight="600"
      fill="#1d1c1d"
      opacity="0"
    >
      ðŸ“Š Q4 Pipeline Breakdown
      <animate attributeName="opacity" values="0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1" dur="4s" repeatCount="indefinite"/>
    </text>
    <text
      x={slackDemo.x + 20}
      y={messages.botMessage.y + 62}
      font-size="11"
      fill="#1d1c1d"
      opacity="0"
    >
      Total: $2.4M across 47 opportunities
      <animate attributeName="opacity" values="0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1" dur="4s" repeatCount="indefinite"/>
    </text>

    {/* Chart title */}
    <text
      x={chart.x + chart.width / 2}
      y={chart.y - 5}
      text-anchor="middle"
      font-size="10"
      font-weight="600"
      fill="#1d1c1d"
      opacity="0"
    >
      Deal Size Distribution
      <animate attributeName="opacity" values="0;0;0;0;0;0;0;0;0;0;1;1;1;1;1;1;1;1;1;1" dur="4s" repeatCount="indefinite"/>
    </text>

    {/* Animated bar chart */}
    {dealData.map((deal, i) => {
      const barX = chart.x + (i * (chart.barWidth + 15)) + 30;
      const barHeight = (deal.percentage / 100) * chart.maxHeight;
      const barY = chart.y + chart.maxHeight - barHeight;
      
      return (
        <g opacity="0">
          <animate attributeName="opacity" values="0;0;1;1" dur="4s" repeatCount="indefinite"/>
          
          {/* Bar background */}
          <rect
            x={barX}
            y={chart.y}
            width={chart.barWidth}
            height={chart.maxHeight}
            fill="#f3f4f6"
            rx="4"
          />
          
          {/* Animated bar fill */}
          <rect
            x={barX}
            y={chart.y + chart.maxHeight}
            width={chart.barWidth}
            height="0"
            fill={deal.color}
            rx="4"
          >
            <animate
              attributeName="height"
              values={`0;0;${barHeight};${barHeight}`}
              dur="4s"
              begin={`${i * 0.1}s`}
              repeatCount="indefinite"
            />
            <animate
              attributeName="y"
              values={`${chart.y + chart.maxHeight};${chart.y + chart.maxHeight};${barY};${barY}`}
              dur="4s"
              begin={`${i * 0.1}s`}
              repeatCount="indefinite"
            />
          </rect>
          
          {/* Bar labels */}
          <text
            x={barX + chart.barWidth / 2}
            y={chart.y + chart.maxHeight + 15}
            text-anchor="middle"
            font-size="9"
            font-weight="500"
            fill="#4b5563"
          >
            {deal.label}
          </text>
          <text
            x={barX + chart.barWidth / 2}
            y={chart.y + chart.maxHeight + 27}
            text-anchor="middle"
            font-size="8"
            fill="#6b7280"
          >
            {deal.value} deals
          </text>
        </g>
      );
    })}

  </svg>
</div>